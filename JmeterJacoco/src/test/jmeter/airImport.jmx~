<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\apache-jmeter-4.0\lib\ext\json-20180813.jar,src\test\resources</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="csv路径" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">E://Work//TSN//interface//download</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${local}</stringProp>
          <stringProp name="HTTPSampler.port">${local_port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cookie</stringProp>
              <stringProp name="Header.value">JSESSIONID=22AB3224183189D927AEC46081B68EA3; userId=lwm; userName=%E6%B1%9F%E5%8D%97; login_token=8b685d3c-3e25-4d61-ace2-a0a6fa806647</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Redis" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">xt_wshome</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.4.191:3306/xt_wshome?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">P5w3m64caOEtMSbb</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">develop</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户名和密码" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="URL变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="test" elementType="Argument">
              <stringProp name="Argument.name">test</stringProp>
              <stringProp name="Argument.value">122.224.230.26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prod" elementType="Argument">
              <stringProp name="Argument.name">prod</stringProp>
              <stringProp name="Argument.value">api.juzicang.cn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="test_pic_domain" elementType="Argument">
              <stringProp name="Argument.name">test_pic_domain</stringProp>
              <stringProp name="Argument.value">i3.juzicang.net/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock" elementType="Argument">
              <stringProp name="Argument.name">mock</stringProp>
              <stringProp name="Argument.value">192.168.110.209</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dev" elementType="Argument">
              <stringProp name="Argument.name">dev</stringProp>
              <stringProp name="Argument.value">192.168.3.224</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">192.168.3.224</stringProp>
            </elementProp>
            <elementProp name="dev_port" elementType="Argument">
              <stringProp name="Argument.name">dev_port</stringProp>
              <stringProp name="Argument.value">20054</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="test_port" elementType="Argument">
              <stringProp name="Argument.name">test_port</stringProp>
              <stringProp name="Argument.value">20054</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock_prefix" elementType="Argument">
              <stringProp name="Argument.name">mock_prefix</stringProp>
              <stringProp name="Argument.value">tsnAirImport</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock_port" elementType="Argument">
              <stringProp name="Argument.name">mock_port</stringProp>
              <stringProp name="Argument.value">8082</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="local" elementType="Argument">
              <stringProp name="Argument.name">local</stringProp>
              <stringProp name="Argument.value">192.168.8.31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="local_port" elementType="Argument">
              <stringProp name="Argument.name">local_port</stringProp>
              <stringProp name="Argument.value">9080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="false">
          <stringProp name="dataSource">sso</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@192.168.3.55:1521:zjporttest</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <stringProp name="username">sso</stringProp>
          <stringProp name="password">sso0308</stringProp>
          <stringProp name="initQuery"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取CSV行数循环" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

int rowNum_login = 0;
int rowNum_commodity_add = 0;
int rowNum_live_add= 0;
//System.out.println(&quot;这个是为了获取行数&quot;);
try {
	System.out.println(&quot;${csv_path_num}user.csv&quot;);

    BufferedReader br_login = new BufferedReader(new FileReader(&quot;${csv_path_num}user.csv&quot;));
    String tmpStr_login = &quot;&quot;;


//    登录csv文件
    while ((tmpStr_login = br_login.readLine()) != null) {
                rowNum_login++;
            }
       
            
    } catch (
            IOException ioe) {
            ioe.printStackTrace();
            }
vars.put(&quot;rowNum_login&quot;, String.valueOf(rowNum_login));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-直单" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-直单-自提" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;21&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport-----${id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取自提状态选项_param/getPickUpStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getPickUpStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改客户自提状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/pickUp?id=${id}&amp;pickUpStatus=3&amp;pickUpTime=${__timeShift(yyyy-MM-dd HH:mm,,P10d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-直单-送货服务" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;21&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="勾选送货服务_/saveDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDelivery</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除送货地址_/deleteDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deleteDelivery?id=${deliveryListId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取送货服务状态选项_param/getDeliveryStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改送货服务状态状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=4</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆状态修改送货服务状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=3</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-分单" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-分单-自提" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;22&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
        	  &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
    &quot;airlineId&quot;: 10,&#xd;
    &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;departurePortId&quot;: 3686,&#xd;
    &quot;destinationPortId&quot;: 3685,&#xd;
    &quot;mawb&quot;: &quot;&quot;,&#xd;
    &quot;hawb&quot;: &quot;hawb1595317032&quot;,&#xd;
    &quot;freightClause&quot;: &quot;04&quot;,&#xd;
    &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
    &quot;packNo&quot;: 2,&#xd;
    &quot;grossWeight&quot;: 30,&#xd;
    &quot;volume&quot;: 50,&#xd;
    &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
    &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
    &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
    &quot;consigneeId&quot;: 105,&#xd;
    &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
    &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
    &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
    &quot;clientBusinessNo&quot;: &quot;clientNo1595317032&quot;,&#xd;
    &quot;remark&quot;: &quot;这个是分单的业务备${__time(/1000,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
    &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND)&quot;,&#xd;
    &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
    &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA)&quot;,&#xd;
    &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
    &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
    &quot;packTypeId&quot;: 331,&#xd;
    &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
    &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
    &quot;deliveryOrderFlag&quot;: false,&#xd;
    &quot;customsDeclarationFlag&quot;: false,&#xd;
    &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取自提状态选项_param/getPickUpStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getPickUpStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改客户自提状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/pickUp?id=${id}&amp;pickUpStatus=3&amp;pickUpTime=${__timeShift(yyyy-MM-dd HH:mm,,P10d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-分单-送货服务" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;22&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
        	  &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
         }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
    &quot;airlineId&quot;: 10,&#xd;
    &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;departurePortId&quot;: 3686,&#xd;
    &quot;destinationPortId&quot;: 3685,&#xd;
    &quot;mawb&quot;: &quot;&quot;,&#xd;
    &quot;hawb&quot;: &quot;hawb1595317032&quot;,&#xd;
    &quot;freightClause&quot;: &quot;04&quot;,&#xd;
    &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
    &quot;packNo&quot;: 2,&#xd;
    &quot;grossWeight&quot;: 30,&#xd;
    &quot;volume&quot;: 50,&#xd;
    &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
    &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
    &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
    &quot;consigneeId&quot;: 105,&#xd;
    &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
    &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
    &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
    &quot;clientBusinessNo&quot;: &quot;clientNo1595317032&quot;,&#xd;
    &quot;remark&quot;: &quot;这个是分单的业务备${__time(/1000,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
    &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND)&quot;,&#xd;
    &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
    &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA)&quot;,&#xd;
    &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
    &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
    &quot;packTypeId&quot;: 331,&#xd;
    &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
    &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
    &quot;deliveryOrderFlag&quot;: false,&#xd;
    &quot;customsDeclarationFlag&quot;: false,&#xd;
    &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="勾选送货服务_/saveDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDelivery</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除送货地址_/deleteDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deleteDelivery?id=${deliveryListId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取送货服务状态选项_param/getDeliveryStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改送货服务状态状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=4</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆状态修改送货服务状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=3</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-查询" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取tab名字_/param/getTabType" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/param/getTabTypes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取各tab数字统计_/airImport/getCount" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getCount?pageIndex=1&amp;pageSize=20&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部查询（除HAWB）_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;businessNo=TESTAI20001&amp;mawb=mawb1595&amp;clientBusinessNo=clientNo&amp;departurePortId=3683&amp;destinationPortId=3683&amp;etaStart=2020-07-01&amp;etaEnd=2020-07-31&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部查询（只有HAWB）_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;hawb=hawb15953&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="草稿_/getList?pageIndex=1&amp;pageSize=20&amp;listType=02" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=02</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待到港_/getList?pageIndex=1&amp;pageSize=20&amp;listType=03" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=03</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待抽单_/getList?pageIndex=1&amp;pageSize=20&amp;listType=04" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=04</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待委托报关_/getList?pageIndex=1&amp;pageSize=20&amp;listType=05" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=05</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待委托送货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=06" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=06</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待提货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=07" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=07</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待送货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=08" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=08</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="费用和签单_/getList?pageIndex=1&amp;pageSize=20&amp;listType=09" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=09</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/getList?pageIndex=1&amp;pageSize=20&amp;listType=10" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=10</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/getList?pageIndex=1&amp;pageSize=20&amp;listType=11" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=11</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="费用待录入_/airImport/getLis" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getList?businessNo=&amp;clientBusinessNo=&amp;pageIndex=1&amp;pageSize=20&amp;listType=01&amp;processStatus=2</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="随机控制器" enabled="false">
          <intProp name="InterleaveControl.style">1</intProp>
        </RandomController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PickUpController" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的提货信息_/air/export/pickup/commitPickUpDetail" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;baseId&quot;: -49882410,&#xd;
  &quot;contactsLink&quot;: &quot;velit et anim est officia&quot;,&#xd;
  &quot;contactsName&quot;: &quot;quis fugiat&quot;,&#xd;
  &quot;fileUrls&quot;: [&#xd;
    {&#xd;
      &quot;businessId&quot;: 48848270,&#xd;
      &quot;businessType&quot;: &quot;laborum consectetur&quot;,&#xd;
      &quot;createId&quot;: &quot;nostrud dolore Lorem occaecat sed&quot;,&#xd;
      &quot;createTime&quot;: &quot;2013-04-24T23:26:39.096Z&quot;,&#xd;
      &quot;fileManagementId&quot;: 81299090,&#xd;
      &quot;fileName&quot;: &quot;esse amet dolor ut culpa&quot;,&#xd;
      &quot;fileUrl&quot;: &quot;amet sunt ea do&quot;,&#xd;
      &quot;orgId&quot;: 51501002,&#xd;
      &quot;remark&quot;: &quot;tempor in exercitation proident&quot;,&#xd;
      &quot;type&quot;: &quot;nulla reprehenderit aliquip&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;id&quot;: 45517072,&#xd;
  &quot;numberPlate&quot;: &quot;ex Excepteur dolor incididunt voluptate&quot;,&#xd;
  &quot;pickUpAddress&quot;: &quot;culpa exercitation sunt cupidatat&quot;,&#xd;
  &quot;pickUpStatus&quot;: &quot;tempor dolor magna ex dolore&quot;,&#xd;
  &quot;pickUpTime&quot;: &quot;1945-11-08T00:57:45.669Z&quot;,&#xd;
  &quot;receivePersonName&quot;: &quot;mollit exercitation&quot;,&#xd;
  &quot;receivePhone&quot;: &quot;aliquip&quot;,&#xd;
  &quot;vehicleId&quot;: 54593307,&#xd;
  &quot;vehicleName&quot;: &quot;commodo&quot;,&#xd;
  &quot;vehicleNo&quot;: &quot;officia ex culpa adipisicing&quot;,&#xd;
  &quot;warehousingTime&quot;: &quot;1981-08-24T22:49:26.274Z&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/air/export/pickup/commitPickUpDetail</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理创建业务编号_createBusinessNo" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/createBusinessNo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String businessNo = data_obj.get(&quot;data&quot;).get(&quot;businessNo&quot;).toString(); 

     vars.put(&quot;businessNo&quot;,businessNo);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="海运拼箱" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="海运拼箱------------------------------------------------------------" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理创建业务编号_createBusinessNo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/createBusinessNo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String businessNo = data_obj.get(&quot;data&quot;).get(&quot;businessNo&quot;).toString(); 

     vars.put(&quot;businessNo&quot;,businessNo);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取所有客户_tsnUct/client/queryByParam" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/queryByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存基础信息_saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;customerNo&quot;: 94,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;businessType&quot;: &quot;02&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询箱型箱量_tsnBase/baseContainerType/getBaseContainerTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnBase/baseContainerType/getBaseContainerTypeList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情_/tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;

//	     判断详情中businessNo与查询的businessNo一致
		String businessNoDetail=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
//
		String businessNo=vars.get(&quot;businessNo&quot;);

		if(businessNo.equals(businessNoDetail)){
			Failure=false;
		     result=result+&quot;businessNo返回正确&quot;;
		}else{
			Failure=true;
     		FailureMessage=result+&quot;businessNo返回错误&quot;;
		     result=&quot;businessNo返回错误&quot;;
		}
		
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;status未返回0错误&quot;;
	     result=&quot;status未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录销售人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=sale" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=sale</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录客服人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=service</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录商务人员_uct-webapp/user/getUserByPosition.jspa?positionCode=business" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=business</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情发货人_/tsnUct/client/queryByParam?queryParam=" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/queryByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/consigneeMatching?str=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情通知人_/tsnShipping/shipping/export/input/notificationsMatching" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/notificationsMatching?str=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情通知人_/tsnShipping/shipping/export/input/notificationsMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情起运港_/tsnBase/basePort/getBasePortList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePort/getBasePortList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情目的港获取航线_/tsnBase/baseServiceLine/getBaseServiceLineById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/baseServiceLine/getBaseServiceLineById?id=13</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情获取包装类型_/tsnBase/basePackType/getBasePackTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePackType/getBasePackTypeList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存完善基础信息_saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;consignor&quot;: 94,&#xd;
        &quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
        &quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
        &quot;receivingAddress&quot;: null,&#xd;
        &quot;transportClause&quot;: &quot;04&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;departurePort&quot;: 2627,&#xd;
        &quot;transferPort&quot;: null,&#xd;
        &quot;destinationPort&quot;: 2015,&#xd;
        &quot;serviceLineId&quot;: 13,&#xd;
        &quot;destination&quot;: null,&#xd;
        &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
        &quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;billIssuePlace&quot;: null,&#xd;
        &quot;billType&quot;: null,&#xd;
        &quot;billCount&quot;: &quot;THREE&quot;,&#xd;
        &quot;shippingCompany&quot;: null,&#xd;
        &quot;payBill&quot;: null,&#xd;
        &quot;businessInformation&quot;: null,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;customsConfirmButton&quot;: null,&#xd;
        &quot;downloadDocumentButton&quot;: null,&#xd;
        &quot;businessType&quot;: &quot;02&quot;,&#xd;
        &quot;assignDispatchersId&quot;: null,&#xd;
        &quot;bookingStatus&quot;: &quot;01&quot;,&#xd;
        &quot;trailerStatus&quot;: null,&#xd;
        &quot;documentStatus&quot;: null,&#xd;
        &quot;customsStatus&quot;: null,&#xd;
        &quot;entryDeclareType&quot;: null,&#xd;
        &quot;arriveStatus&quot;: null,&#xd;
        &quot;customerConfirmStatus&quot;: null,&#xd;
        &quot;downloadBillStatus&quot;: null,&#xd;
        &quot;consignorName&quot;: &quot;jn&quot;,&#xd;
        &quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
        &quot;transferPortName&quot;: null,&#xd;
        &quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
        &quot;transferPortCode&quot;: null,&#xd;
        &quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
        &quot;shippingCompanyName&quot;: null,&#xd;
        &quot;shippingCompanyCode&quot;: null,&#xd;
        &quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
        &quot;serviceLineName&quot;: &quot;&quot;,&#xd;
        &quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;9876543210&quot;,&#xd;
        &quot;destinationCountryEnName&quot;: &quot;CROATIA&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerNo&quot;: &quot;94&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;salesPersonnelName&quot;: &quot;&quot;,&#xd;
        &quot;customerPersonnelName&quot;: &quot;&quot;,&#xd;
        &quot;businessPersonnelName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;hbaseBean&quot;: [],&#xd;
    &quot;containerList&quot;: [&#xd;
        {&#xd;
            &quot;containerId&quot;: &quot;&quot;,&#xd;
            &quot;containerTypeCode&quot;: &quot;&quot;,&#xd;
            &quot;containerTypeName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;merchandiseBean&quot;: {&#xd;
        &quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;enlishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;hsCode&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;unitId&quot;: &quot;372&quot;,&#xd;
        &quot;grossWeight&quot;: 1000,&#xd;
        &quot;volume&quot;: 200,&#xd;
        &quot;remark&quot;: &quot;&quot;,&#xd;
        &quot;unitCode&quot;: &quot;SK&quot;,&#xd;
        &quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表待订舱查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=02</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;待订舱查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;新增记录成功&quot;;
	   		  }else{
	   		  	Failure=true;
     			FailureMessage=result+&quot;新增记录错误&quot;;
	     		result=&quot;新增记录错误&quot;;
	   		  }
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;待订舱查询数量返回错误&quot;;
	     	result=&quot;待订舱查询数量返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理提交订舱基本信息_/tsnShipping/shipping/export/input/saveBaseInfoAndSubmit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;consignor&quot;: 94,&#xd;
        &quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
        &quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
        &quot;receivingAddress&quot;: null,&#xd;
        &quot;transportClause&quot;: &quot;04&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;departurePort&quot;: 2627,&#xd;
        &quot;transferPort&quot;: null,&#xd;
        &quot;destinationPort&quot;: 2015,&#xd;
        &quot;serviceLineId&quot;: 13,&#xd;
        &quot;destination&quot;: null,&#xd;
        &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
        &quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;billIssuePlace&quot;: null,&#xd;
        &quot;billType&quot;: null,&#xd;
        &quot;billCount&quot;: &quot;THREE&quot;,&#xd;
        &quot;shippingCompany&quot;: null,&#xd;
        &quot;payBill&quot;: null,&#xd;
        &quot;businessInformation&quot;: null,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;customsConfirmButton&quot;: null,&#xd;
        &quot;downloadDocumentButton&quot;: null,&#xd;
        &quot;businessType&quot;: &quot;02&quot;,&#xd;
        &quot;assignDispatchersId&quot;: null,&#xd;
        &quot;bookingStatus&quot;: &quot;01&quot;,&#xd;
        &quot;trailerStatus&quot;: null,&#xd;
        &quot;documentStatus&quot;: null,&#xd;
        &quot;customsStatus&quot;: null,&#xd;
        &quot;entryDeclareType&quot;: null,&#xd;
        &quot;arriveStatus&quot;: null,&#xd;
        &quot;customerConfirmStatus&quot;: null,&#xd;
        &quot;downloadBillStatus&quot;: null,&#xd;
        &quot;consignorName&quot;: &quot;jn&quot;,&#xd;
        &quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
        &quot;transferPortName&quot;: null,&#xd;
        &quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
        &quot;transferPortCode&quot;: null,&#xd;
        &quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
        &quot;shippingCompanyName&quot;: null,&#xd;
        &quot;shippingCompanyCode&quot;: null,&#xd;
        &quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
        &quot;serviceLineName&quot;: &quot;&quot;,&#xd;
        &quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;9876543210&quot;,&#xd;
        &quot;destinationCountryEnName&quot;: &quot;CROATIA&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerNo&quot;: &quot;94&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;salesPersonnelName&quot;: null,&#xd;
        &quot;customerPersonnelName&quot;: null,&#xd;
        &quot;businessPersonnelName&quot;: null&#xd;
    },&#xd;
    &quot;hbaseBean&quot;: [],&#xd;
    &quot;containerList&quot;: [&#xd;
        {&#xd;
            &quot;containerId&quot;: null,&#xd;
            &quot;containerTypeCode&quot;: &quot;&quot;,&#xd;
            &quot;containerTypeName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;merchandiseBean&quot;: {&#xd;
        &quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;enlishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;hsCode&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;unitId&quot;: &quot;372&quot;,&#xd;
        &quot;grossWeight&quot;: 1000,&#xd;
        &quot;volume&quot;: 2,&#xd;
        &quot;remark&quot;: &quot;&quot;,&#xd;
        &quot;unitCode&quot;: &quot;SK&quot;,&#xd;
        &quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfoAndSubmit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询操作详情信息_tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String clientId = data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;customerNo&quot;).toString(); 

     vars.put(&quot;clientId&quot;,clientId);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理下载订舱委托书_/tsnReport/report/export" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnReport/report/export?reportCode=R010002&amp;businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="保存下载的订舱委托书" enabled="true">
              <stringProp name="BeanShellSampler.query">import java.io.*;

byte[] result = prev.getResponseData();  //这个是获取到请求返回的数据，prev是获取上个请求的返回
String path=vars.get(&quot;path&quot;);
String file_name = path+&quot;//订舱委托书${__time(/1000,)}.xlsx&quot;;
File file = new File(file_name);
FileOutputStream out = new FileOutputStream(file);
out.write(result);
out.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理更新订舱委托书为已订舱_/tsnShipping/shipping/export/inputBill/updateBookingStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/updateBookingStatus?businessNo=${businessNo}&amp;bookingStatus=02</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=03</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;已订舱查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;从待订舱转变为已订舱&quot;;
	   		  }else{
	   		  	Failure=true;
     			FailureMessage=result+&quot;从待订舱转变为已订舱错误&quot;;
	     		result=&quot;从已订舱转变为订舱确认错误&quot;;
	   		  }
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;已订舱查询数量返回错误&quot;;
	     	result=&quot;已订舱查询数量返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存订舱信息_tsnShipping/shipping/export/input/saveTransportInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;shippingExportBaseInfo&quot;: {&#xd;
		&quot;baseBean&quot;: {&#xd;
			&quot;consignor&quot;: 94,&#xd;
			&quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
			&quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
			&quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
			&quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
			&quot;receivingAddress&quot;: null,&#xd;
			&quot;transportClause&quot;: &quot;04&quot;,&#xd;
			&quot;freightClause&quot;: &quot;02&quot;,&#xd;
			&quot;departurePort&quot;: 2627,&#xd;
			&quot;transferPort&quot;: null,&#xd;
			&quot;destinationPort&quot;: 2015,&#xd;
			&quot;serviceLineIdA&quot;: 13,&#xd;
			&quot;destination&quot;: null,&#xd;
			&quot;exitPort&quot;: &quot;nb&quot;,&#xd;
			&quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
			&quot;billIssuePlace&quot;: null,&#xd;
			&quot;billType&quot;: null,&#xd;
			&quot;billCount&quot;: &quot;THREE&quot;,&#xd;
			&quot;shippingCompany&quot;: null,&#xd;
			&quot;payBill&quot;: null,&#xd;
			&quot;businessInformation&quot;: null,&#xd;
			&quot;id&quot;: ${id},&#xd;
			&quot;customsConfirmButton&quot;: null,&#xd;
			&quot;downloadDocumentButton&quot;: null,&#xd;
			&quot;businessType&quot;: &quot;02&quot;,&#xd;
			&quot;assignDispatchersId&quot;: null,&#xd;
			&quot;bookingStatus&quot;: &quot;02&quot;,&#xd;
			&quot;trailerStatus&quot;: null,&#xd;
			&quot;documentStatus&quot;: null,&#xd;
			&quot;customsStatus&quot;: null,&#xd;
			&quot;entryDeclareType&quot;: null,&#xd;
			&quot;arriveStatus&quot;: null,&#xd;
			&quot;customerConfirmStatus&quot;: null,&#xd;
			&quot;downloadBillStatus&quot;: null,&#xd;
			&quot;consignorName&quot;: &quot;jn&quot;,&#xd;
			&quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
			&quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
			&quot;transferPortName&quot;: null,&#xd;
			&quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
			&quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
			&quot;transferPortCode&quot;: null,&#xd;
			&quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
			&quot;shippingCompanyName&quot;: null,&#xd;
			&quot;shippingCompanyCode&quot;: null,&#xd;
			&quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
			&quot;serviceLineName&quot;: &quot;&quot;,&#xd;
			&quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
			&quot;childFlag&quot;: null,&#xd;
			&quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
			&quot;customerNo&quot;: &quot;94&quot;,&#xd;
			&quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
			&quot;customerName&quot;: &quot;江南&quot;,&#xd;
			&quot;salesPersonnelName&quot;: null,&#xd;
			&quot;customerPersonnelName&quot;: null,&#xd;
			&quot;businessPersonnelName&quot;: null&#xd;
		},&#xd;
		&quot;containerList&quot;: [{&#xd;
			&quot;containerId&quot;: null,&#xd;
			&quot;containerCount&quot;: null,&#xd;
			&quot;containerTypeCode&quot;: &quot;&quot;,&#xd;
			&quot;containerTypeName&quot;: &quot;&quot;&#xd;
		}],&#xd;
		&quot;hbaseBean&quot;: [],&#xd;
		&quot;merchandiseBean&quot;: {&#xd;
			&quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
			&quot;enGoodsName&quot;: &quot;enlishpinming${__time(/1000,)}&quot;,&#xd;
			&quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
			&quot;hsCode&quot;: &quot;&quot;,&#xd;
			&quot;packNo&quot;: 2,&#xd;
			&quot;unitId&quot;: &quot;372&quot;,&#xd;
			&quot;grossWeight&quot;: 1000,&#xd;
			&quot;netWeight&quot;: 0,&#xd;
			&quot;volume&quot;: 2,&#xd;
			&quot;remark&quot;: &quot;&quot;,&#xd;
			&quot;unitCode&quot;: &quot;SK&quot;,&#xd;
			&quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;shippingExportTransport&quot;: {&#xd;
		&quot;mbL&quot;: &quot;&quot;,&#xd;
		&quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
		&quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
		&quot;bookingAgentCode&quot;: &quot;54&quot;,&#xd;
		&quot;customsFileEndDate&quot;: &quot;${__timeShift(yyyy-MM-dd HH:mm:ss,,P1d,,)}&quot;,&#xd;
		&quot;enterNumber&quot;: &quot;jincang${__time(/1000,)}&quot;,&#xd;
		&quot;enterDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
		&quot;enterRequire&quot;: &quot;这个是进仓时间备注${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
		&quot;exitPort&quot;: &quot;nb&quot;,&#xd;
		&quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
		&quot;portOpenDate&quot;: null,&#xd;
		&quot;portCloseDate&quot;: null,&#xd;
		&quot;customsCloseDate&quot;: null,&#xd;
		&quot;orderCloseDate&quot;: null,&#xd;
		&quot;etd&quot;: null,&#xd;
		&quot;atd&quot;: null,&#xd;
		&quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
		&quot;jamsEms&quot;: null,&#xd;
		&quot;remark&quot;: &quot;&quot;,&#xd;
		&quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
		&quot;wharfName&quot;: &quot;&quot;,&#xd;
		&quot;wharfCode&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;shippingExportDispatch&quot;: {&#xd;
		&quot;enterNumber&quot;: &quot;jincang${__time(/1000,)}&quot;,&#xd;
		&quot;enterDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;enterRequire&quot;: &quot;这个是进仓时间备注${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseAndTransport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱确认_/tsnShipping/shipping/export/input/transportConfirm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/transportConfirm?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表订舱确认查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=04</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表订舱确认查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;确认订舱查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;从已订舱转变为订舱确认&quot;;
	     	}else{
	     		Failure=true;
     			FailureMessage=result+&quot;从已订舱转变为订舱确认错误&quot;;
	     		result=&quot;从已订舱转变为订舱确认错误&quot;;
	     	}
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;订舱确认查询数量错误&quot;;
	     	result=&quot;订舱确认查询数量错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情查询信息_/tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String baseId=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;baseId&quot;).toString();
	String billNo=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;mbL&quot;).toString();
	String trafName=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;shippingName&quot;).toString();
	String voyage=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;voyage&quot;).toString();
	String region=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;exitPort&quot;).toString();

	vars.put(&quot;baseId&quot;,baseId);
	vars.put(&quot;billNo&quot;,billNo);
	vars.put(&quot;trafName&quot;,trafName);
	vars.put(&quot;voyage&quot;,voyage);
	vars.put(&quot;region&quot;,region);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱信息获取船期信息_/tsnShipping/shipping/dubQuery/queryShippingDate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/dubQuery/queryShippingDate?baseId=${baseId}&amp;billNo=${billNo}&amp;trafName=${trafName}&amp;voyage=${voyage}&amp;region=${region}&amp;ieFlag=E</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;status&quot;).toString();
     String message=data_obj.get(&quot;message&quot;).toString();
     String m=&quot;该提单号无查询权限&quot;;
     String m1=&quot;无此船期信息&quot;;

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else if(state.equals(&quot;1&quot;)&amp;&amp;(message.contains(m)||message.contains(m1))){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存调度信息_/tsnShipping/shipping/export/input/saveDispatchInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryType&quot;: &quot;01&quot;,&#xd;
    &quot;contacts&quot;: &quot;&quot;,&#xd;
    &quot;phone&quot;: &quot;&quot;,&#xd;
    &quot;equipmentList&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehoustId&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehouseAddress&quot;: &quot;&quot;,&#xd;
    &quot;enterNumber&quot;: &quot;&quot;,&#xd;
    &quot;enterRequire&quot;: &quot;&quot;,&#xd;
    &quot;enterDate&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehouseCode&quot;: &quot;&quot;,&#xd;
    &quot;suppilerNameShort&quot;: &quot;&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveDispatchInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱信息填写ATD_tsnShipping/shipping/export/input/saveTransportInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;shippingExportBaseInfo&quot;: {&#xd;
		&quot;baseBean&quot;: {&#xd;
			&quot;consignor&quot;: 94,&#xd;
			&quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
			&quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
			&quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
			&quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
			&quot;receivingAddress&quot;: null,&#xd;
			&quot;transportClause&quot;: &quot;04&quot;,&#xd;
			&quot;freightClause&quot;: &quot;02&quot;,&#xd;
			&quot;departurePort&quot;: 2627,&#xd;
			&quot;transferPort&quot;: null,&#xd;
			&quot;destinationPort&quot;: 2015,&#xd;
			&quot;serviceLineIdA&quot;: 13,&#xd;
			&quot;destination&quot;: null,&#xd;
			&quot;exitPort&quot;: &quot;nb&quot;,&#xd;
			&quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
			&quot;billIssuePlace&quot;: null,&#xd;
			&quot;billType&quot;: null,&#xd;
			&quot;billCount&quot;: &quot;THREE&quot;,&#xd;
			&quot;shippingCompany&quot;: null,&#xd;
			&quot;payBill&quot;: null,&#xd;
			&quot;businessInformation&quot;: null,&#xd;
			&quot;id&quot;: ${id},&#xd;
			&quot;customsConfirmButton&quot;: null,&#xd;
			&quot;downloadDocumentButton&quot;: null,&#xd;
			&quot;businessType&quot;: &quot;02&quot;,&#xd;
			&quot;assignDispatchersId&quot;: null,&#xd;
			&quot;bookingStatus&quot;: &quot;03&quot;,&#xd;
			&quot;trailerStatus&quot;: null,&#xd;
			&quot;documentStatus&quot;: null,&#xd;
			&quot;customsStatus&quot;: null,&#xd;
			&quot;entryDeclareType&quot;: null,&#xd;
			&quot;arriveStatus&quot;: null,&#xd;
			&quot;customerConfirmStatus&quot;: null,&#xd;
			&quot;downloadBillStatus&quot;: null,&#xd;
			&quot;consignorName&quot;: &quot;jn&quot;,&#xd;
			&quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
			&quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
			&quot;transferPortName&quot;: null,&#xd;
			&quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
			&quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
			&quot;transferPortCode&quot;: null,&#xd;
			&quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
			&quot;shippingCompanyName&quot;: null,&#xd;
			&quot;shippingCompanyCode&quot;: null,&#xd;
			&quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
			&quot;serviceLineName&quot;: &quot;&quot;,&#xd;
			&quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
			&quot;childFlag&quot;: null,&#xd;
			&quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
			&quot;customerNo&quot;: &quot;94&quot;,&#xd;
			&quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
			&quot;customerName&quot;: &quot;江南&quot;,&#xd;
			&quot;salesPersonnelName&quot;: null,&#xd;
			&quot;customerPersonnelName&quot;: null,&#xd;
			&quot;businessPersonnelName&quot;: null&#xd;
		},&#xd;
		&quot;containerList&quot;: [{&#xd;
			&quot;containerId&quot;: null,&#xd;
			&quot;containerCount&quot;: null,&#xd;
			&quot;containerTypeCode&quot;: &quot;&quot;,&#xd;
			&quot;containerTypeName&quot;: &quot;&quot;&#xd;
		}],&#xd;
		&quot;hbaseBean&quot;: [],&#xd;
		&quot;merchandiseBean&quot;: {&#xd;
			&quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
			&quot;enGoodsName&quot;: &quot;enlishpinming${__time(/1000,)}&quot;,&#xd;
			&quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
			&quot;hsCode&quot;: &quot;&quot;,&#xd;
			&quot;packNo&quot;: 2,&#xd;
			&quot;unitId&quot;: &quot;372&quot;,&#xd;
			&quot;grossWeight&quot;: 1000,&#xd;
			&quot;netWeight&quot;: 0,&#xd;
			&quot;volume&quot;: 2,&#xd;
			&quot;remark&quot;: &quot;&quot;,&#xd;
			&quot;unitCode&quot;: &quot;SK&quot;,&#xd;
			&quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;shippingExportTransport&quot;: {&#xd;
		&quot;mbL&quot;: &quot;&quot;,&#xd;
		&quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
		&quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
		&quot;bookingAgentCode&quot;: &quot;54&quot;,&#xd;
		&quot;customsFileEndDate&quot;: &quot;${__timeShift(yyyy-MM-dd HH:mm:ss,,P1d,,)}&quot;,&#xd;
		&quot;enterNumber&quot;: &quot;jincang${__time(/1000,)}&quot;,&#xd;
		&quot;enterDate&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
		&quot;enterRequire&quot;: &quot;这个是进仓时间备注${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
		&quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
		&quot;portOpenDate&quot;: null,&#xd;
		&quot;portCloseDate&quot;: null,&#xd;
		&quot;customsCloseDate&quot;: null,&#xd;
		&quot;orderCloseDate&quot;: null,&#xd;
		&quot;etd&quot;: null,&#xd;
		&quot;atd&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
		&quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
		&quot;jamsEms&quot;: null,&#xd;
		&quot;remark&quot;: &quot;&quot;,&#xd;
		&quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
		&quot;wharfName&quot;: &quot;&quot;,&#xd;
		&quot;wharfCode&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;shippingExportDispatch&quot;: {&#xd;
		&quot;enterNumber&quot;: &quot;jincang${__time(/1000,)}&quot;,&#xd;
		&quot;enterDate&quot;: &quot;${__time(yyyy-MM-dd,)}&quot;,&#xd;
		&quot;enterRequire&quot;: &quot;这个是进仓时间备注${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseAndTransport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表费用和签单查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=09</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表订舱确认查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;费用和签单查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;填写ATD后状态变为费用和签单&quot;;
	     	}else{
	     		Failure=true;
     			FailureMessage=result+&quot;填写ATD后状态变为费用和签单错误&quot;;
	     		result=&quot;填写ATD后状态变为费用和签单错误&quot;;
	     	}
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;费用和签单数量查询返回错误&quot;;
	     	result=&quot;费用和签单数量查询返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/export/inputBill/queryList?pageIndex=0&amp;pageSize=20&amp;listType=01</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;

//   响应状态码
     String code = data_obj.get(&quot;code&quot;).toString(); 

//   响应message
     String message = data_obj.get(&quot;message&quot;).toString(); 

//     成功登录
     if(code.equals(&quot;0&quot;)){
//     	message判断
		if(message.equals(&quot;成功&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为1时message信息错误&quot;;
	          result=&quot;code返回值为1时message信息错误&quot;;
		}
//	登录失败,用户名或者密码未填写
     }else if(code.equals(&quot;9000&quot;)){
//     	message判断
		if(message.equals(&quot;参数验证不正确&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为9000时message信息错误&quot;;
	          result=&quot;code返回值为9000时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120003&quot;)){
//     	message判断
		if(message.equals(&quot;用户不存在&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120003时message信息错误&quot;;
	          result=&quot;code返回值为120003时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120004&quot;)){
//     	message判断
		if(message.equals(&quot;密码错误&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120004时message信息错误&quot;;
	          result=&quot;code返回值为120004时message信息错误&quot;;
		}
	     
     }else{
     	Failure=true;
	     FailureMessage=&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;;
	     result=&quot;login状态码&quot;+code+&quot;返回值错误请确认&quot;;
     	System.out.println(&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;);
     }
     vars.put(&quot;code&quot;,code);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="代拉代报" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="代拉代报------------------------------------------------------------" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理创建业务编号_createBusinessNo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/createBusinessNo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String businessNo = data_obj.get(&quot;data&quot;).get(&quot;businessNo&quot;).toString(); 

     vars.put(&quot;businessNo&quot;,businessNo);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取所有客户_tsnUct/client/queryByParam" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/queryByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存基础信息_saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;customerNo&quot;: 94,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;businessType&quot;: &quot;03&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表待排车查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=05</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;待订舱查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;新增记录成功&quot;;
	   		  }else{
	   		  	Failure=true;
     			FailureMessage=result+&quot;新增记录错误&quot;;
	     		result=&quot;新增记录错误&quot;;
	   		  }
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;待订舱查询数量返回错误&quot;;
	     	result=&quot;待订舱查询数量返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情_/tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;

//	     判断详情中businessNo与查询的businessNo一致
		String businessNoDetail=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
//
		String businessNo=vars.get(&quot;businessNo&quot;);

		if(businessNo.equals(businessNoDetail)){
			Failure=false;
		     result=result+&quot;businessNo返回正确&quot;;
		}else{
			Failure=true;
     		FailureMessage=result+&quot;businessNo返回错误&quot;;
		     result=&quot;businessNo返回错误&quot;;
		}
		
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;status未返回0错误&quot;;
	     result=&quot;status未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录销售人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=sale" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=sale</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录客服人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=service</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录商务人员_uct-webapp/user/getUserByPosition.jspa?positionCode=business" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=business</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情起运港_/tsnBase/basePort/getBasePortList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePort/getBasePortList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询箱型箱量_tsnBase/baseContainerType/getBaseContainerTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnBase/baseContainerType/getBaseContainerTypeList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询件数单位_/tsnBase/basePackType/getBasePackTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePackType/getBasePackTypeList?searchStr=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管暂存订舱基本信息_/tsnShipping/shipping/export/input/saveBaseAndTransport" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;shippingExportBaseInfo&quot;: {&#xd;
        &quot;baseBean&quot;: {&#xd;
            &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
            &quot;consignor&quot;: null,&#xd;
            &quot;consignorDescribe&quot;: null,&#xd;
            &quot;consignee&quot;: null,&#xd;
            &quot;notifications&quot;: null,&#xd;
            &quot;client&quot;: null,&#xd;
            &quot;receivingAddress&quot;: null,&#xd;
            &quot;transportClause&quot;: null,&#xd;
            &quot;freightClause&quot;: &quot;01&quot;,&#xd;
            &quot;departurePort&quot;: 2627,&#xd;
            &quot;transferPort&quot;: null,&#xd;
            &quot;destinationPort&quot;: 2015,&#xd;
            &quot;serviceLineId&quot;: 13,&#xd;
            &quot;destination&quot;: null,&#xd;
            &quot;exitPort&quot;: null,&#xd;
	       &quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
	       &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
            &quot;billIssuePlace&quot;: null,&#xd;
            &quot;billType&quot;: null,&#xd;
            &quot;billCount&quot;: &quot;THREE&quot;,&#xd;
            &quot;shippingCompany&quot;: null,&#xd;
            &quot;payBill&quot;: null,&#xd;
            &quot;businessInformation&quot;: null,&#xd;
            &quot;id&quot;: &quot;${id}&quot;,&#xd;
            &quot;customsConfirmButton&quot;: null,&#xd;
            &quot;downloadDocumentButton&quot;: null,&#xd;
            &quot;businessType&quot;: &quot;03&quot;,&#xd;
            &quot;assignDispatchersId&quot;: null,&#xd;
            &quot;bookingStatus&quot;: null,&#xd;
            &quot;trailerStatus&quot;: &quot;01&quot;,&#xd;
            &quot;documentStatus&quot;: null,&#xd;
            &quot;customsStatus&quot;: null,&#xd;
            &quot;entryDeclareType&quot;: null,&#xd;
            &quot;arriveStatus&quot;: null,&#xd;
            &quot;customerConfirmStatus&quot;: null,&#xd;
            &quot;downloadBillStatus&quot;: null,&#xd;
            &quot;consignorName&quot;: null,&#xd;
            &quot;consignorCode&quot;: null,&#xd;
            &quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
            &quot;transferPortName&quot;: null,&#xd;
            &quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
            &quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
            &quot;transferPortCode&quot;: null,&#xd;
            &quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
            &quot;shippingCompanyName&quot;: null,&#xd;
            &quot;shippingCompanyCode&quot;: null,&#xd;
            &quot;serviceLineCode&quot;: null,&#xd;
            &quot;serviceLineName&quot;: null,&#xd;
            &quot;serviceLineNameCn&quot;: null,&#xd;
            &quot;childFlag&quot;: null,	    &#xd;
            &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
            &quot;destinationCountryEnName&quot;: &quot;CROATIA&quot;,&#xd;
            &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
            &quot;customerNo&quot;: &quot;94&quot;,&#xd;
            &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
            &quot;customerName&quot;: &quot;江南&quot;,&#xd;
            &quot;salesPersonnelName&quot;: null,&#xd;
            &quot;customerPersonnelName&quot;: null,&#xd;
            &quot;businessPersonnelName&quot;: null&#xd;
        },&#xd;
        &quot;hbaseBean&quot;: [],&#xd;
        &quot;containerList&quot;: [&#xd;
            {&#xd;
                &quot;containerId&quot;: 30,&#xd;
                &quot;containerCount&quot;: 2,&#xd;
                &quot;containerTypeCode&quot;: &quot;20GP&quot;,&#xd;
                &quot;containerTypeName&quot;: &quot;20GP&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;merchandiseBean&quot;: {&#xd;
            &quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
            &quot;enGoodsName&quot;: &quot;&quot;,&#xd;
            &quot;shippingMarks&quot;: &quot;&quot;,&#xd;
            &quot;netWeight&quot;: null,	    &#xd;
            &quot;atd&quot;: &quot;&quot;,&#xd;
            &quot;hsCode&quot;: &quot;&quot;,&#xd;
            &quot;packNo&quot;: 2,&#xd;
            &quot;unitId&quot;: &quot;347&quot;,&#xd;
	       &quot;grossWeight&quot;: 1000,&#xd;
            &quot;volume&quot;: 2,&#xd;
            &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
            &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
            &quot;remark&quot;: &quot;&quot;,&#xd;
            &quot;unitCode&quot;: &quot;JT&quot;,&#xd;
            &quot;unitName&quot;: &quot;JBAGS&quot;&#xd;
        }&#xd;
    },&#xd;
    &quot;shippingExportTransport&quot;: {&#xd;
        &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
        &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
        &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
        &quot;wharfId&quot;: null,&#xd;
        &quot;wharfName&quot;: null,&#xd;
        &quot;wharfCode&quot;: null,&#xd;
        &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
        &quot;portOpenDate&quot;: null,&#xd;
        &quot;portCloseDate&quot;: null,&#xd;
        &quot;customsCloseDate&quot;: null,&#xd;
        &quot;orderCloseDate&quot;: null,&#xd;
        &quot;etd&quot;: null,&#xd;
        &quot;atd&quot;: null,&#xd;
        &quot;jamsEms&quot;: null&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseAndTransport</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理提交基础信息_/tsnShipping/shipping/export/input/saveBaseAndTransport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/transportConfirm?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表已排车查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=05</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;已订舱查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;从待订舱转变为已订舱&quot;;
	   		  }else{
	   		  	Failure=true;
     			FailureMessage=result+&quot;从待订舱转变为已订舱错误&quot;;
	     		result=&quot;从已订舱转变为订舱确认错误&quot;;
	   		  }
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;已订舱查询数量返回错误&quot;;
	     	result=&quot;已订舱查询数量返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询装箱信息_tsnShipping/shipping/exports/binningQuery" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/exports/binningQuery?baseId=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id_string=data_obj.get(&quot;data&quot;).get(&quot;map&quot;).get(0).get(&quot;id&quot;).toString();
	String baseId=data_obj.get(&quot;data&quot;).get(&quot;map&quot;).get(0).get(&quot;id&quot;).toString();


	String id1=id_string;
	int idInt=Integer.parseInt(id_string)+1;
	String id2=idInt+&quot;&quot;;

	vars.put(&quot;id1&quot;,id1);
	vars.put(&quot;id2&quot;,id2);
	vars.put(&quot;baseId&quot;,baseId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理调度保存装箱信息_/tsnShipping/shipping/exports/updateHairyBody" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;creatorId&quot;: null,&#xd;
        &quot;createTime&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
        &quot;orgId&quot;: null,&#xd;
        &quot;modifId&quot;: null,&#xd;
        &quot;modifTime&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
        &quot;deleted&quot;: 0,&#xd;
        &quot;version&quot;: null,&#xd;
        &quot;id&quot;: ${id1},&#xd;
        &quot;baseId&quot;: ${baseId},&#xd;
        &quot;containerHolder&quot;: null,&#xd;
        &quot;grossWeight&quot;: 500,&#xd;
        &quot;containerNo&quot;: null,&#xd;
        &quot;sealNo&quot;: null,&#xd;
        &quot;containerGrossWeight&quot;: null,&#xd;
        &quot;containerTypeId&quot;: 30,&#xd;
        &quot;containerTypeCode&quot;: &quot;20GP&quot;,&#xd;
        &quot;containerTypeName&quot;: &quot;20GP&quot;,&#xd;
        &quot;numberPlate&quot;: null,&#xd;
        &quot;driverPhone&quot;: null,&#xd;
        &quot;vehicleName&quot;: null,&#xd;
        &quot;vehicleNo&quot;: null,&#xd;
        &quot;vehicleId&quot;: null,&#xd;
        &quot;packingAddress&quot;: &quot;代拉代报装箱A&quot;,&#xd;
        &quot;estimatedPackingTime&quot;: &quot;${__timeShift(yyyy-MM-dd HH:mm:ss,,P1d,,)}&quot;,&#xd;
        &quot;packingPhone&quot;: &quot;&quot;,&#xd;
        &quot;packingContact&quot;: &quot;&quot;,&#xd;
        &quot;remark&quot;: null,&#xd;
        &quot;status&quot;: null,&#xd;
        &quot;carpoolingState&quot;: null,&#xd;
        &quot;unitId&quot;: &quot;347&quot;,&#xd;
        &quot;unitCode&quot;: &quot;JT&quot;,&#xd;
        &quot;unitName&quot;: &quot;JBAGS&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;creatorId&quot;: null,&#xd;
        &quot;createTime&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
        &quot;orgId&quot;: null,&#xd;
        &quot;modifId&quot;: null,&#xd;
        &quot;modifTime&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
        &quot;deleted&quot;: 0,&#xd;
        &quot;version&quot;: null,&#xd;
        &quot;id&quot;: ${id2},&#xd;
        &quot;baseId&quot;: ${baseId},&#xd;
        &quot;containerHolder&quot;: null,&#xd;
        &quot;grossWeight&quot;: 500,&#xd;
        &quot;containerNo&quot;: null,&#xd;
        &quot;sealNo&quot;: null,&#xd;
        &quot;containerGrossWeight&quot;: null,&#xd;
        &quot;containerTypeId&quot;: 30,&#xd;
        &quot;containerTypeCode&quot;: &quot;20GP&quot;,&#xd;
        &quot;containerTypeName&quot;: &quot;20GP&quot;,&#xd;
        &quot;numberPlate&quot;: null,&#xd;
        &quot;driverPhone&quot;: null,&#xd;
        &quot;vehicleName&quot;: null,&#xd;
        &quot;vehicleNo&quot;: null,&#xd;
        &quot;vehicleId&quot;: null,&#xd;
        &quot;packingAddress&quot;: &quot;代拉代报装箱B&quot;,&#xd;
        &quot;estimatedPackingTime&quot;: &quot;${__timeShift(yyyy-MM-dd HH:mm:ss,,P1d,,)}&quot;,&#xd;
        &quot;packingPhone&quot;: &quot;&quot;,&#xd;
        &quot;packingContact&quot;: &quot;&quot;,&#xd;
        &quot;remark&quot;: null,&#xd;
        &quot;status&quot;: null,&#xd;
        &quot;carpoolingState&quot;: null,&#xd;
        &quot;unitId&quot;: &quot;347&quot;,&#xd;
        &quot;unitCode&quot;: &quot;JT&quot;,&#xd;
        &quot;unitName&quot;: &quot;JBAGS&quot;&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/exports/updateHairyBody</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存调度信息_/tsnShipping/shipping/export/input/saveDispatchInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryType&quot;: &quot;03&quot;,&#xd;
    &quot;contacts&quot;: &quot;&quot;,&#xd;
    &quot;phone&quot;: &quot;&quot;,&#xd;
    &quot;equipmentList&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehoustId&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehouseAddress&quot;: &quot;&quot;,&#xd;
    &quot;enterNumber&quot;: &quot;&quot;,&#xd;
    &quot;enterRequire&quot;: &quot;&quot;,&#xd;
    &quot;enterDate&quot;: &quot;&quot;,&#xd;
    &quot;suppilerWarehouseCode&quot;: &quot;&quot;,&#xd;
    &quot;suppilerNameShort&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveDispatchInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询装箱信息_tsnShipping/shipping/exports/binningQuery" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/exports/binningQuery?baseId=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id_string=data_obj.get(&quot;data&quot;).get(&quot;map&quot;).get(0).get(&quot;id&quot;).toString();
	String baseId=data_obj.get(&quot;data&quot;).get(&quot;map&quot;).get(0).get(&quot;id&quot;).toString();


	String id1=id_string;
	int idInt=Integer.parseInt(id_string)+1;
	String id2=idInt+&quot;&quot;;

	vars.put(&quot;id1&quot;,id1);
	vars.put(&quot;id2&quot;,id2);
	vars.put(&quot;baseId&quot;,baseId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询调度岗位人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=dispatch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=dispatch</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
//	JSONObject data_obj = new JSONObject(response_data); 
//	JSONArray myJsonArray = JSONArray.fromObject(response_data);

//	for(i=0;i&lt;myJsonArray.length();i++){
//		String status=myJsonArray.get(0).toString();
//		System.out.println(&quot;----&quot;+status+&quot;-----&quot;);
//	}
//
////tsnUct/client/queryByParam接口结果
//	String result=&quot;操作管理查询调度岗位人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=dispatch&quot;;
//
////   响应status
//     String state = data_obj.getget(&quot;state&quot;).toString();
//
////     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
//     if(state.equals(&quot;0&quot;)){
//     	Failure=false;
//	     result=result+&quot;state返回正确&quot;;
//     }else{
//     	Failure=true;
//     	FailureMessage=result+&quot;state未返回0错误&quot;;
//	     result=&quot;state未返回0错误&quot;;
//     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理指派调度人员_/tsnShipping/shipping/export/inputBill/assign" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/assign?businessNo=${businessNo}&amp;assign=lwm&amp;assignName=江南</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表已排车查询_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?businessNo=${businessNo}&amp;pageIndex=0&amp;pageSize=20&amp;listType=05</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理列表已订舱查询_/tsnShipping/shipping/export/inputBill/queryList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//	获取生成的businessNo
	String businessNo=vars.get(&quot;businessNo&quot;);

	
//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
//     数量统计
		String total=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;total&quot;).toString();
		if(total.equals(&quot;1&quot;)){
			Failure=false;
	          result=result+&quot;已排车查询数量正确&quot;;
				//	businessNo检验
			String businessNo_1=data_obj.get(&quot;data&quot;).get(&quot;shippingExportList&quot;).get(&quot;list&quot;).get(0).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
			if(businessNo.equals(businessNo_1)){
	     		Failure=false;
	          	result=result+&quot;代拉代报新增状态为已排车&quot;;
	   		  }else{
	   		  	Failure=true;
     			FailureMessage=result+&quot;代拉代报新增状态为已排车错误&quot;;
	     		result=&quot;代拉代报新增状态为已排车&quot;;
	   		  }
			
		}else{
	     	Failure=true;
     		FailureMessage=result+&quot;已排车查询数量返回错误&quot;;
	     	result=&quot;已排车查询数量返回错误&quot;;
	     }     
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="调度管理数量查询_/tsnShipping/shipping/exports/dispatchListNumber" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/exports/dispatchListNumber</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="调度管理待排车查询_/tsnShipping/shipping/exports/displayList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/exports/displayList?pageIndex=0&amp;pageSize=20&amp;businessNo=${businessNo}&amp;mbL=&amp;consignor=&amp;shippingCompany=&amp;departurePort=&amp;destinationPort=&amp;trailerStatus=01</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String clientId = data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;customerNo&quot;).toString(); 

     vars.put(&quot;clientId&quot;,clientId);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="代拉代报------------------------------------------------------------" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取订舱代理_/tsnUct/supplierBooking/getBookingList" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/supplierBooking/getBookingList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存订舱信息_tsnShipping/shipping/export/input/saveTransportInfo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;bookShippingCode&quot;: &quot;dingcang${__time(/1000,)}&quot;,&#xd;
    &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
    &quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
    &quot;wharfId&quot;: &quot;&quot;,&#xd;
    &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
    &quot;bookingAgentCode&quot;: 54,&#xd;
    &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
    &quot;&quot;: &quot;&quot;,&#xd;
    &quot;portOpenDate&quot;: &quot;&quot;,&#xd;
    &quot;portCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;customsCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;orderCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;etd&quot;: &quot;&quot;,&#xd;
    &quot;atd&quot;: &quot;&quot;,&#xd;
    &quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
    &quot;jamsEms&quot;: &quot;&quot;,&#xd;
    &quot;remark&quot;: &quot;&quot;,&#xd;
    &quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
    &quot;wharfName&quot;: &quot;&quot;,&#xd;
    &quot;wharfCode&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveTransportInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱确认_/tsnShipping/shipping/export/input/transportConfirm" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/transportConfirm?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情查询信息_/tsnShipping/shipping/export/inputBill/query" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String baseId=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;baseId&quot;).toString();
	String billNo=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;mbL&quot;).toString();
	String trafName=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;shippingName&quot;).toString();
	String voyage=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;voyage&quot;).toString();
	String region=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;exitPort&quot;).toString();

	vars.put(&quot;baseId&quot;,baseId);
	vars.put(&quot;billNo&quot;,billNo);
	vars.put(&quot;trafName&quot;,trafName);
	vars.put(&quot;voyage&quot;,voyage);
	vars.put(&quot;region&quot;,region);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱信息获取船期信息_/tsnShipping/shipping/dubQuery/queryShippingDate" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/dubQuery/queryShippingDate?baseId=${baseId}&amp;billNo=${billNo}&amp;trafName=${trafName}&amp;voyage=${voyage}&amp;region=${region}&amp;ieFlag=E</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;status&quot;).toString();
     String message=data_obj.get(&quot;message&quot;).toString();
     String m=&quot;billNo=&quot;+vars.get(&quot;billNo&quot;)+&quot;该提单号无查询权限&quot;;

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else if(state.equals(&quot;1&quot;)&amp;&amp;message.equals(m)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询客户信息_/tsnUct/client/getClientInfo" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/getClientInfo?clientId=${clientId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取装箱地址_/tsnUct/clientPackingAddress/getList" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/clientPackingAddress/getList?clientId=${clientId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理调度保存装箱信息_/tsnShipping/shipping/exports/updateHairyBody" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/exports/updateHairyBody</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表_/tsnShipping/shipping/export/inputBill/queryList" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/queryList?pageIndex=0&amp;pageSize=20</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;

//   响应状态码
     String code = data_obj.get(&quot;code&quot;).toString(); 

//   响应message
     String message = data_obj.get(&quot;message&quot;).toString(); 

//     成功登录
     if(code.equals(&quot;0&quot;)){
//     	message判断
		if(message.equals(&quot;成功&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为1时message信息错误&quot;;
	          result=&quot;code返回值为1时message信息错误&quot;;
		}
//	登录失败,用户名或者密码未填写
     }else if(code.equals(&quot;9000&quot;)){
//     	message判断
		if(message.equals(&quot;参数验证不正确&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为9000时message信息错误&quot;;
	          result=&quot;code返回值为9000时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120003&quot;)){
//     	message判断
		if(message.equals(&quot;用户不存在&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120003时message信息错误&quot;;
	          result=&quot;code返回值为120003时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120004&quot;)){
//     	message判断
		if(message.equals(&quot;密码错误&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120004时message信息错误&quot;;
	          result=&quot;code返回值为120004时message信息错误&quot;;
		}
	     
     }else{
     	Failure=true;
	     FailureMessage=&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;;
	     result=&quot;login状态码&quot;+code+&quot;返回值错误请确认&quot;;
     	System.out.println(&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;);
     }
     vars.put(&quot;code&quot;,code);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱信息填写ATD_tsnShipping/shipping/export/input/saveTransportInfo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;bookShippingCode&quot;: &quot;dingcang${__time(/1000,)}&quot;,&#xd;
    &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
    &quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
    &quot;wharfId&quot;: &quot;&quot;,&#xd;
    &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
    &quot;bookingAgentCode&quot;: 54,&#xd;
    &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
    &quot;portOpenDate&quot;: &quot;&quot;,&#xd;
    &quot;portCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;customsCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;orderCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;etd&quot;: &quot;&quot;,&#xd;
    &quot;atd&quot;: &quot;${__time(yyyy-MM-dd,)} 00:00:00&quot;,&#xd;
    &quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
    &quot;jamsEms&quot;: &quot;&quot;,&#xd;
    &quot;remark&quot;: &quot;&quot;,&#xd;
    &quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
    &quot;wharfName&quot;: &quot;&quot;,&#xd;
    &quot;wharfCode&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveTransportInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="待订舱" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待订舱-----------------------------------------------------------" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理创建业务编号_createBusinessNo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/createBusinessNo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String businessNo = data_obj.get(&quot;data&quot;).get(&quot;businessNo&quot;).toString(); 

     vars.put(&quot;businessNo&quot;,businessNo);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取所有客户_tsnUct/client/queryByParam" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/queryByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存基础信息_saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;customerNo&quot;: 94,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;businessType&quot;: &quot;04&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询箱型箱量_tsnBase/baseContainerType/getBaseContainerTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnBase/baseContainerType/getBaseContainerTypeList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情_/tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;

//	     判断详情中businessNo与查询的businessNo一致
		String businessNoDetail=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;businessNo&quot;).toString();
//
		String businessNo=vars.get(&quot;businessNo&quot;);

		if(businessNo.equals(businessNoDetail)){
			Failure=false;
		     result=result+&quot;businessNo返回正确&quot;;
		}else{
			Failure=true;
     		FailureMessage=result+&quot;businessNo返回错误&quot;;
		     result=&quot;businessNo返回错误&quot;;
		}
		
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;status未返回0错误&quot;;
	     result=&quot;status未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录销售人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=sale" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=sale</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录客服人员_/uct-webapp/user/getUserByPosition.jspa?positionCode=service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=service</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录商务人员_uct-webapp/user/getUserByPosition.jspa?positionCode=business" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/uct-webapp/user/getUserByPosition.jspa?positionCode=business</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情发货人_/tsnUct/client/queryByParam?queryParam=" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/client/queryByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/consigneeMatching?str=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情通知人_/tsnShipping/shipping/export/input/notificationsMatching" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/notificationsMatching?str=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情通知人_/tsnShipping/shipping/export/input/notificationsMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情起运港_/tsnBase/basePort/getBasePortList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePort/getBasePortList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情目的港获取航线_/tsnBase/baseServiceLine/getBaseServiceLineById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/baseServiceLine/getBaseServiceLineById?id=13</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情获取包装类型_/tsnBase/basePackType/getBasePackTypeList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnBase/basePackType/getBasePackTypeList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存完善基础信息_saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;consignor&quot;: 94,&#xd;
        &quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
        &quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
        &quot;receivingAddress&quot;: null,&#xd;
        &quot;transportClause&quot;: &quot;04&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;departurePort&quot;: 2627,&#xd;
        &quot;transferPort&quot;: null,&#xd;
        &quot;destinationPort&quot;: 2015,&#xd;
        &quot;serviceLineId&quot;: 13,&#xd;
        &quot;destination&quot;: null,&#xd;
        &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
        &quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;billIssuePlace&quot;: null,&#xd;
        &quot;billType&quot;: null,&#xd;
        &quot;billCount&quot;: &quot;THREE&quot;,&#xd;
        &quot;shippingCompany&quot;: null,&#xd;
        &quot;payBill&quot;: null,&#xd;
        &quot;businessInformation&quot;: null,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;customsConfirmButton&quot;: null,&#xd;
        &quot;downloadDocumentButton&quot;: null,&#xd;
        &quot;businessType&quot;: &quot;04&quot;,&#xd;
        &quot;assignDispatchersId&quot;: null,&#xd;
        &quot;bookingStatus&quot;: &quot;01&quot;,&#xd;
        &quot;trailerStatus&quot;: null,&#xd;
        &quot;documentStatus&quot;: null,&#xd;
        &quot;customsStatus&quot;: null,&#xd;
        &quot;entryDeclareType&quot;: null,&#xd;
        &quot;arriveStatus&quot;: null,&#xd;
        &quot;customerConfirmStatus&quot;: null,&#xd;
        &quot;downloadBillStatus&quot;: null,&#xd;
        &quot;consignorName&quot;: &quot;jn&quot;,&#xd;
        &quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
        &quot;transferPortName&quot;: null,&#xd;
        &quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
        &quot;transferPortCode&quot;: null,&#xd;
        &quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
        &quot;shippingCompanyName&quot;: null,&#xd;
        &quot;shippingCompanyCode&quot;: null,&#xd;
        &quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
        &quot;serviceLineName&quot;: &quot;&quot;,&#xd;
        &quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;9876543210&quot;,&#xd;
        &quot;destinationCountryEnName&quot;: &quot;CROATIA&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerNo&quot;: &quot;94&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;,&#xd;
        &quot;salesPersonnelName&quot;: null,&#xd;
        &quot;customerPersonnelName&quot;: null,&#xd;
        &quot;businessPersonnelName&quot;: null&#xd;
    },&#xd;
    &quot;hbaseBean&quot;: [],&#xd;
    &quot;containerList&quot;: [&#xd;
        {&#xd;
            &quot;containerId&quot;: 30,&#xd;
            &quot;containerCount&quot;: 2,&#xd;
            &quot;containerTypeCode&quot;: &quot;20GP&quot;,&#xd;
            &quot;containerTypeName&quot;: &quot;20GP&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;merchandiseBean&quot;: {&#xd;
        &quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;atd&quot;: &quot;&quot;,&#xd;
        &quot;hsCode&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;unitId&quot;: &quot;372&quot;,&#xd;
        &quot;grossWeight&quot;: 1000,&#xd;
        &quot;mbL&quot;: &quot;&quot;,&#xd;
        &quot;volume&quot;: 2,&#xd;
        &quot;remark&quot;: &quot;&quot;,&#xd;
        &quot;unitCode&quot;: &quot;SK&quot;,&#xd;
        &quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理提交订舱基本信息_/tsnShipping/shipping/export/input/saveBaseInfoAndSubmit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;baseBean&quot;: {&#xd;
        &quot;consignor&quot;: 94,&#xd;
        &quot;consignorDescribe&quot;: &quot;jiangnan zhejiang province hangzhuo city jianggan&quot;,&#xd;
        &quot;consignee&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;client&quot;: &quot;jmeter${__time(/1000,)}&quot;,&#xd;
        &quot;receivingAddress&quot;: null,&#xd;
        &quot;transportClause&quot;: &quot;04&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;departurePort&quot;: 2627,&#xd;
        &quot;transferPort&quot;: null,&#xd;
        &quot;destinationPort&quot;: 2015,&#xd;
        &quot;serviceLineId&quot;: 13,&#xd;
        &quot;destination&quot;: null,&#xd;
        &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
        &quot;estimateShipping&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;billIssuePlace&quot;: null,&#xd;
        &quot;billType&quot;: null,&#xd;
        &quot;billCount&quot;: &quot;THREE&quot;,&#xd;
        &quot;shippingCompany&quot;: null,&#xd;
        &quot;payBill&quot;: null,&#xd;
        &quot;businessInformation&quot;: null,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;customsConfirmButton&quot;: null,&#xd;
        &quot;downloadDocumentButton&quot;: null,&#xd;
        &quot;businessType&quot;: &quot;04&quot;,&#xd;
        &quot;assignDispatchersId&quot;: null,&#xd;
        &quot;bookingStatus&quot;: &quot;01&quot;,&#xd;
        &quot;trailerStatus&quot;: null,&#xd;
        &quot;documentStatus&quot;: null,&#xd;
        &quot;customsStatus&quot;: null,&#xd;
        &quot;entryDeclareType&quot;: null,&#xd;
        &quot;arriveStatus&quot;: null,&#xd;
        &quot;customerConfirmStatus&quot;: null,&#xd;
        &quot;downloadBillStatus&quot;: null,&#xd;
        &quot;consignorName&quot;: &quot;jn&quot;,&#xd;
        &quot;consignorCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;EASTER ISLAND,CHILE &quot;,&#xd;
        &quot;transferPortName&quot;: null,&#xd;
        &quot;destinationPortName&quot;: &quot;RASA,CROATIA &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;CLEAI&quot;,&#xd;
        &quot;transferPortCode&quot;: null,&#xd;
        &quot;destinationPortCode&quot;: &quot;HRRAS&quot;,&#xd;
        &quot;shippingCompanyName&quot;: null,&#xd;
        &quot;shippingCompanyCode&quot;: null,&#xd;
        &quot;serviceLineCode&quot;: &quot;E.MEDI&quot;,&#xd;
        &quot;serviceLineName&quot;: &quot;&quot;,&#xd;
        &quot;serviceLineNameCn&quot;: &quot;地东线&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;9876543210&quot;,&#xd;
        &quot;destinationCountryEnName&quot;: &quot;CROATIA&quot;,&#xd;
        &quot;businessNo&quot;: &quot;${businessNo}&quot;,&#xd;
        &quot;customerNo&quot;: &quot;94&quot;,&#xd;
        &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;customerName&quot;: &quot;江南&quot;&#xd;
    },&#xd;
    &quot;hbaseBean&quot;: [],&#xd;
    &quot;containerList&quot;: [&#xd;
        {&#xd;
            &quot;containerId&quot;: 30,&#xd;
            &quot;containerCount&quot;: 2,&#xd;
            &quot;containerTypeCode&quot;: &quot;20GP&quot;,&#xd;
            &quot;containerTypeName&quot;: &quot;20GP&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;merchandiseBean&quot;: {&#xd;
        &quot;cnGoodsName&quot;: &quot;&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;enlishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;hsCode&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;unitId&quot;: &quot;372&quot;,&#xd;
        &quot;grossWeight&quot;: 1000,&#xd;
        &quot;volume&quot;: 2,&#xd;
        &quot;remark&quot;: &quot;&quot;,&#xd;
        &quot;unitCode&quot;: &quot;SK&quot;,&#xd;
        &quot;unitName&quot;: &quot;SKCSES&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveBaseInfoAndSubmit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理查询操作详情信息_tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;
//{&quot;data&quot;:{&quot;businessNo&quot;:&quot;SETEST20031800034&quot;},&quot;state&quot;:0,&quot;message&quot;:&quot;成功&quot;}

//   响应message
     String clientId = data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportBase&quot;).get(&quot;customerNo&quot;).toString(); 

     vars.put(&quot;clientId&quot;,clientId);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理下载订舱委托书_/tsnReport/report/export" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnReport/report/export?reportCode=R010002&amp;businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="保存下载的订舱委托书" enabled="true">
              <stringProp name="BeanShellSampler.query">import java.io.*;

byte[] result = prev.getResponseData();  //这个是获取到请求返回的数据，prev是获取上个请求的返回
String path=vars.get(&quot;path&quot;);
String file_name = path+&quot;//订舱委托书${__time(/1000,)}.xlsx&quot;;
File file = new File(file_name);
FileOutputStream out = new FileOutputStream(file);
out.write(result);
out.close();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理更新订舱委托书为已订舱_/tsnShipping/shipping/export/inputBill/updateBookingStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/updateBookingStatus?businessNo=${businessNo}&amp;bookingStatus=02</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理获取订舱代理_/tsnUct/supplierBooking/getBookingList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnUct/supplierBooking/getBookingList</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理保存订舱信息_tsnShipping/shipping/export/input/saveTransportInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;bookShippingCode&quot;: &quot;dingcang${__time(/1000,)}&quot;,&#xd;
    &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
    &quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
    &quot;wharfId&quot;: &quot;&quot;,&#xd;
    &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
    &quot;bookingAgentCode&quot;: 54,&#xd;
    &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
    &quot;customsFileEndDate&quot;: &quot;&quot;,&#xd;
    &quot;enterNumber&quot;: &quot;&quot;,&#xd;
    &quot;enterDate&quot;: &quot;&quot;,&#xd;
    &quot;enterRequire&quot;: &quot;&quot;,&#xd;
    &quot;exitPort&quot;: &quot;nb&quot;,&#xd;
    &quot;portOpenDate&quot;: &quot;&quot;,&#xd;
    &quot;portCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;customsCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;orderCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;etd&quot;: &quot;&quot;,&#xd;
    &quot;atd&quot;: &quot;&quot;,&#xd;
    &quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
    &quot;jamsEms&quot;: &quot;&quot;,&#xd;
    &quot;remark&quot;: &quot;&quot;,&#xd;
    &quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
    &quot;wharfName&quot;: &quot;&quot;,&#xd;
    &quot;wharfCode&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveTransportInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱确认_/tsnShipping/shipping/export/input/transportConfirm" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/transportConfirm?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理记录详情查询信息_/tsnShipping/shipping/export/inputBill/query" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/inputBill/query?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String baseId=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;baseId&quot;).toString();
	String billNo=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;mbL&quot;).toString();
	String trafName=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;shippingName&quot;).toString();
	String voyage=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;voyage&quot;).toString();
	String region=data_obj.get(&quot;data&quot;).get(&quot;shippingExportInputBillVo&quot;).get(&quot;shippingExportTransport&quot;).get(&quot;exitPort&quot;).toString();

	vars.put(&quot;baseId&quot;,baseId);
	vars.put(&quot;billNo&quot;,billNo);
	vars.put(&quot;trafName&quot;,trafName);
	vars.put(&quot;voyage&quot;,voyage);
	vars.put(&quot;region&quot;,region);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情收货人_/tsnShipping/shipping/export/input/consigneeMatching接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理订舱信息获取船期信息_/tsnShipping/shipping/dubQuery/queryShippingDate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/dubQuery/queryShippingDate?baseId=${baseId}&amp;billNo=${billNo}&amp;trafName=${trafName}&amp;voyage=${voyage}&amp;region=${region}&amp;ieFlag=E</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;status&quot;).toString();
     String message=data_obj.get(&quot;message&quot;).toString();
     String m=&quot;该提单号无查询权限&quot;;
     String m1=&quot;无此船期信息&quot;;

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else if(state.equals(&quot;1&quot;)&amp;&amp;(message.contains(m)||message.contains(m1))){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理填写ATD_tsnShipping/shipping/export/input/saveTransportInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;bookShippingCode&quot;: &quot;dingcang${__time(/1000,)}&quot;,&#xd;
    &quot;mbL&quot;: &quot;mbl${__time(/1000,)}&quot;,&#xd;
    &quot;hbL&quot;: &quot;hbl${__time(/1000,)}&quot;,&#xd;
    &quot;wharfId&quot;: &quot;&quot;,&#xd;
    &quot;shippingName&quot;: &quot;shippingName${__time(/1000,)}&quot;,&#xd;
    &quot;bookingAgentCode&quot;: 54,&#xd;
    &quot;enterRequire&quot;: &quot;&quot;,&#xd;
    &quot;voyage&quot;: &quot;hangci${__time(/1000,)}&quot;,&#xd;
    &quot;&quot;: &quot;&quot;,&#xd;
    &quot;portOpenDate&quot;: &quot;&quot;,&#xd;
    &quot;portCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;customsCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;orderCloseDate&quot;: &quot;&quot;,&#xd;
    &quot;etd&quot;: &quot;&quot;,&#xd;
    &quot;atd&quot;: &quot;${__time(yyyy-MM-dd HH:mm:ss,time)}&quot;,&#xd;
    &quot;destinationPortApply&quot;: &quot;&quot;,&#xd;
    &quot;jamsEms&quot;: &quot;&quot;,&#xd;
    &quot;remark&quot;: &quot;&quot;,&#xd;
    &quot;bookingAgentName&quot;: &quot;江南订舱代理&quot;,&#xd;
    &quot;wharfName&quot;: &quot;&quot;,&#xd;
    &quot;wharfCode&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/tsnShipping/shipping/export/input/saveTransportInfo?businessNo=${businessNo}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理记录详情起运港_/tsnBase/basePort/getBasePortList接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="操作管理列表_/tsnShipping/shipping/export/inputBill/queryList" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnShipping/shipping/export/inputBill/queryList?pageIndex=0&amp;pageSize=20&amp;listType=01</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//登录接口结果
	String result;

//   响应状态码
     String code = data_obj.get(&quot;code&quot;).toString(); 

//   响应message
     String message = data_obj.get(&quot;message&quot;).toString(); 

//     成功登录
     if(code.equals(&quot;0&quot;)){
//     	message判断
		if(message.equals(&quot;成功&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为1时message信息错误&quot;;
	          result=&quot;code返回值为1时message信息错误&quot;;
		}
//	登录失败,用户名或者密码未填写
     }else if(code.equals(&quot;9000&quot;)){
//     	message判断
		if(message.equals(&quot;参数验证不正确&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为9000时message信息错误&quot;;
	          result=&quot;code返回值为9000时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120003&quot;)){
//     	message判断
		if(message.equals(&quot;用户不存在&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120003时message信息错误&quot;;
	          result=&quot;code返回值为120003时message信息错误&quot;;
		}
	     
     }else if(code.equals(&quot;120004&quot;)){
//     	message判断
		if(message.equals(&quot;密码错误&quot;)){
			Failure=false;
	     	result=&quot;login登录接口成功&quot;;
		}else{
			Failure=false;
     		FailureMessage=&quot;code返回值为120004时message信息错误&quot;;
	          result=&quot;code返回值为120004时message信息错误&quot;;
		}
	     
     }else{
     	Failure=true;
	     FailureMessage=&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;;
	     result=&quot;login状态码&quot;+code+&quot;返回值错误请确认&quot;;
     	System.out.println(&quot;状态码&quot;+code+&quot;返回值错误请确认&quot;);
     }
     vars.put(&quot;code&quot;,code);
}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">    http://122.224.230.26:20054/tsnBase/baseContainerType/getBaseContainerTypeList</stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
