<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\apache-jmeter-4.0\lib\ext\json-20180813.jar,/opt/apache-jmeter-4.0/lib/ext/json-20180813.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="csv路径" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">E://Work//TSN//interface//download</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${test}</stringProp>
          <stringProp name="HTTPSampler.port">${test_port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Redis" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">xt_wshome</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.4.191:3306/xt_wshome?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">P5w3m64caOEtMSbb</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">develop</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户名和密码" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="URL变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="test" elementType="Argument">
              <stringProp name="Argument.name">test</stringProp>
              <stringProp name="Argument.value">122.224.230.26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prod" elementType="Argument">
              <stringProp name="Argument.name">prod</stringProp>
              <stringProp name="Argument.value">api.juzicang.cn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="test_pic_domain" elementType="Argument">
              <stringProp name="Argument.name">test_pic_domain</stringProp>
              <stringProp name="Argument.value">i3.juzicang.net/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock" elementType="Argument">
              <stringProp name="Argument.name">mock</stringProp>
              <stringProp name="Argument.value">192.168.110.209</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dev" elementType="Argument">
              <stringProp name="Argument.name">dev</stringProp>
              <stringProp name="Argument.value">192.168.3.224</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">192.168.3.224</stringProp>
            </elementProp>
            <elementProp name="dev_port" elementType="Argument">
              <stringProp name="Argument.name">dev_port</stringProp>
              <stringProp name="Argument.value">20054</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="test_port" elementType="Argument">
              <stringProp name="Argument.name">test_port</stringProp>
              <stringProp name="Argument.value">20054</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock_prefix" elementType="Argument">
              <stringProp name="Argument.name">mock_prefix</stringProp>
              <stringProp name="Argument.value">tsnAirImport</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mock_port" elementType="Argument">
              <stringProp name="Argument.name">mock_port</stringProp>
              <stringProp name="Argument.value">8082</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="local" elementType="Argument">
              <stringProp name="Argument.name">local</stringProp>
              <stringProp name="Argument.value">192.168.8.31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="local_port" elementType="Argument">
              <stringProp name="Argument.name">local_port</stringProp>
              <stringProp name="Argument.value">9080</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">sso</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@192.168.3.55:1521:zjporttest</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <stringProp name="username">sso</stringProp>
          <stringProp name="password">sso0308</stringProp>
          <stringProp name="initQuery"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="提取CSV行数循环" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

int rowNum_login = 0;
int rowNum_commodity_add = 0;
int rowNum_live_add= 0;
//System.out.println(&quot;这个是为了获取行数&quot;);
try {
	System.out.println(&quot;${csv_path_num}user.csv&quot;);

    BufferedReader br_login = new BufferedReader(new FileReader(&quot;${csv_path_num}user.csv&quot;));
    String tmpStr_login = &quot;&quot;;


//    登录csv文件
    while ((tmpStr_login = br_login.readLine()) != null) {
                rowNum_login++;
            }
       
            
    } catch (
            IOException ioe) {
            ioe.printStackTrace();
            }
vars.put(&quot;rowNum_login&quot;, String.valueOf(rowNum_login));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取cookies_/sso/createCaptcha" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">122.224.230.10</stringProp>
          <stringProp name="HTTPSampler.port">17003</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/sso/createCaptcha?verifyCodeSize=null&amp;tmp=0.7545885584969259&amp;clientCode=0.41476076524268546</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="TestPlan.comments">JSESSIONID=(.+?); Path=/sso; HttpOnly</stringProp>
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">cookie111</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: (.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录_/sso/loginCommon" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="loginflag" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">common</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loginflag</stringProp>
              </elementProp>
              <elementProp name="loginTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">common</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loginTab</stringProp>
              </elementProp>
              <elementProp name="login" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">login</stringProp>
              </elementProp>
              <elementProp name="needVerifyCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">needVerifyCode</stringProp>
              </elementProp>
              <elementProp name="loginUserStr" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loginUserStr</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">lwm</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">abcd1234</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="verifyCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">6666</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">verifyCode</stringProp>
              </elementProp>
              <elementProp name="clientCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0.41476076524268546</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientCode</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">122.224.230.10</stringProp>
          <stringProp name="HTTPSampler.port">17003</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/sso/loginCommon</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">cookie111</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: JSESSIONID=(.+?); Path=/sso; HttpOnly</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录_/tsnBase/index/login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="url" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">http://122.224.230.26:20054</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">url</stringProp>
              </elementProp>
              <elementProp name="ticket" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">ST-53-6MAe1VAYjiOAz7ZW8Gzt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">ticket</stringProp>
              </elementProp>
              <elementProp name="clientId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">cd0730af-675c-4d84-a524-a272bd98334c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clientId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
          <stringProp name="HTTPSampler.port">20054</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/tsnBase/index/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-直单" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-直单-自提" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;21&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport-----${id}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取自提状态选项_param/getPickUpStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getPickUpStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改客户自提状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/pickUp?id=${id}&amp;pickUpStatus=3&amp;pickUpTime=${__timeShift(yyyy-MM-dd HH:mm,,P10d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-直单-送货服务" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;21&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="勾选送货服务_/saveDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDelivery</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除送货地址_/deleteDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deleteDelivery?id=${deliveryListId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取送货服务状态选项_param/getDeliveryStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改送货服务状态状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=4</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆状态修改送货服务状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=3</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-分单" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运进口-分单-自提" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;22&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
        	  &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
    &quot;airlineId&quot;: 10,&#xd;
    &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;departurePortId&quot;: 3686,&#xd;
    &quot;destinationPortId&quot;: 3685,&#xd;
    &quot;mawb&quot;: &quot;&quot;,&#xd;
    &quot;hawb&quot;: &quot;hawb1595317032&quot;,&#xd;
    &quot;freightClause&quot;: &quot;04&quot;,&#xd;
    &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
    &quot;packNo&quot;: 2,&#xd;
    &quot;grossWeight&quot;: 30,&#xd;
    &quot;volume&quot;: 50,&#xd;
    &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
    &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
    &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
    &quot;consigneeId&quot;: 105,&#xd;
    &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
    &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
    &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
    &quot;clientBusinessNo&quot;: &quot;clientNo1595317032&quot;,&#xd;
    &quot;remark&quot;: &quot;这个是分单的业务备${__time(/1000,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
    &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND)&quot;,&#xd;
    &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
    &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA)&quot;,&#xd;
    &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
    &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
    &quot;packTypeId&quot;: 331,&#xd;
    &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
    &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
    &quot;deliveryOrderFlag&quot;: false,&#xd;
    &quot;customsDeclarationFlag&quot;: false,&#xd;
    &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取自提状态选项_param/getPickUpStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getPickUpStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改客户自提状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/pickUp?id=${id}&amp;pickUpStatus=3&amp;pickUpTime=${__timeShift(yyyy-MM-dd HH:mm,,P10d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="空运出口-分单-送货服务" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="初始化空运进口基本信息_/airImport/create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customerId&quot;: 105,&#xd;
    &quot;customerName&quot;: &quot;江南责任有限公司&quot;,&#xd;
    &quot;customerCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;businessType&quot;: &quot;22&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String id=data_obj.get(&quot;payload&quot;).get(&quot;base&quot;).get(&quot;id&quot;).toString();


	vars.put(&quot;id&quot;,id);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="保存对应的空运信息_/airImport/saveTemporary" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {}&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveTemporary</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="根据对应空运进口基本信息id查询对应的基本信息_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String deliveryListId=data_obj.get(&quot;payload&quot;).get(&quot;deliveryList&quot;).get(0).get(&quot;id&quot;).toString();

	vars.put(&quot;deliveryListId&quot;,deliveryListId);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交对应的空运信息_/airImport/submit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;base&quot;: {&#xd;
        &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3686,&#xd;
        &quot;destinationPortId&quot;: 3685,&#xd;
        &quot;mawb&quot;: &quot;&quot;,&#xd;
        &quot;hawb&quot;: &quot;hawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;04&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
        &quot;packNo&quot;: 2,&#xd;
        &quot;grossWeight&quot;: 30,&#xd;
        &quot;volume&quot;: 50,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
        &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这个是分单的业务备注${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND) &quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA) &quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;331&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentAddr&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderAgentName&quot;: &quot;&quot;,&#xd;
        &quot;customsDeclarationType&quot;: null,&#xd;
        &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;customsBrokerName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
        	  &quot;contactTel&quot;: &quot;&quot;,&#xd;
            &quot;contacts&quot;: &quot;&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;&quot;,&#xd;
            &quot;driver&quot;: &quot;&quot;,&#xd;
            &quot;driverTel&quot;: &quot;&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;&#xd;
         }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交之后保存基本信息_/airImport/saveBaseInfo" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;flightNo&quot;: &quot;3U8633&quot;,&#xd;
    &quot;airlineId&quot;: 10,&#xd;
    &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;departurePortId&quot;: 3686,&#xd;
    &quot;destinationPortId&quot;: 3685,&#xd;
    &quot;mawb&quot;: &quot;&quot;,&#xd;
    &quot;hawb&quot;: &quot;hawb1595317032&quot;,&#xd;
    &quot;freightClause&quot;: &quot;04&quot;,&#xd;
    &quot;tradeClause&quot;: &quot;09&quot;,&#xd;
    &quot;packNo&quot;: 2,&#xd;
    &quot;grossWeight&quot;: 30,&#xd;
    &quot;volume&quot;: 50,&#xd;
    &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
    &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
    &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
    &quot;consigneeId&quot;: 105,&#xd;
    &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
    &quot;notifications&quot;: &quot;ANJI MAOCHANG FURNITURE CO.,LTD.\t\t\t\t\t\t\nFloor 2, Building 1, Chengnan Community, Lingfeng Subdistrict, Anji County, \nZhejiang Province, China&quot;,&#xd;
    &quot;consignor&quot;: &quot;KOSA BAMBOO\nPAPAVERWEG 37-A 1032 KE AMSTERDAM,THE\nNETHERLANDS&quot;,&#xd;
    &quot;clientBusinessNo&quot;: &quot;clientNo1595317032&quot;,&#xd;
    &quot;remark&quot;: &quot;这个是分单的业务备${__time(/1000,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
    &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;departurePortName&quot;: &quot;LONDON | GREAT BRITAIN (UNITED KINGDOM; ENGLAND)&quot;,&#xd;
    &quot;departurePortCode&quot;: &quot;LON&quot;,&#xd;
    &quot;destinationPortName&quot;: &quot;KJYH | UNITED STATES OF AMERICA (USA)&quot;,&#xd;
    &quot;destinationPortCode&quot;: &quot;KJYH&quot;,&#xd;
    &quot;packTypeCode&quot;: &quot;CH&quot;,&#xd;
    &quot;packTypeId&quot;: 331,&#xd;
    &quot;packTypeName&quot;: &quot;CHSTS&quot;,&#xd;
    &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
    &quot;deliveryOrderFlag&quot;: false,&#xd;
    &quot;customsDeclarationFlag&quot;: false,&#xd;
    &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveBaseInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到港_/airImport/arrive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/arrive?id=${id}&amp;ata=${__timeShift(yyyy-MM-dd,,P3d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交到港后查询_/airImport/getAirImport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getAirImport?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 



	String businessNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessNo&quot;).toString();
	String businessType=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;businessType&quot;).toString();
	String customerCode=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerCode&quot;).toString();
	String customerName=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerName&quot;).toString();	
	String customerNo=data_obj.get(&quot;data&quot;).get(&quot;tsnAirExportAllDetailVo&quot;).get(&quot;tsnAirExportBaseDetailVo&quot;).get(&quot;customerNo&quot;).toString();

	vars.put(&quot;businessNo&quot;,businessNo);
	vars.put(&quot;businessType&quot;,businessType);
	vars.put(&quot;customerCode&quot;,customerCode);
	vars.put(&quot;customerName&quot;,customerName);
	vars.put(&quot;customerNo&quot;,customerNo);

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="发到港通知_airImport/notified" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;flightNo&quot;: &quot; 森岛帆高&quot;,&#xd;
        &quot;airlineId&quot;: 10,&#xd;
        &quot;eta&quot;: &quot;${__timeShift(yyyy-MM-dd,,P1d,,)}&quot;,&#xd;
        &quot;departurePortId&quot;: 3683,&#xd;
        &quot;destinationPortId&quot;: 3683,&#xd;
        &quot;mawb&quot;: &quot;mawb${__time(/1000,)}&quot;,&#xd;
        &quot;freightClause&quot;: &quot;02&quot;,&#xd;
        &quot;tradeClause&quot;: &quot;03&quot;,&#xd;
        &quot;ata&quot;: &quot;&quot;,&#xd;
        &quot;packNo&quot;: 5,&#xd;
        &quot;grossWeight&quot;: 3,&#xd;
        &quot;volume&quot;: 3,&#xd;
        &quot;cnGoodsName&quot;: &quot;chianpinming${__time(/1000,)}&quot;,&#xd;
        &quot;enGoodsName&quot;: &quot;englishpinming${__time(/1000,)}&quot;,&#xd;
        &quot;shippingMarks&quot;: &quot;maitou${__time(/1000,)}&quot;,&#xd;
        &quot;consigneeId&quot;: 105,&#xd;
        &quot;consigneeDescribe&quot;: &quot;jiangnan_en zhejiang hangzhou xiacheng changcheng street 22&quot;,&#xd;
        &quot;notifications&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK&quot;,&#xd;
        &quot;consignor&quot;: &quot;ADDRESS:THE FLUFF-A-TORIUM 20 West Street\nDorking\nSueery\nRH4 1BL\nUK\nTEL:+44 1306 898144&quot;,&#xd;
        &quot;clientBusinessNo&quot;: &quot;clientNo${__time(/1000,)}&quot;,&#xd;
        &quot;remark&quot;: &quot;这是备注信息${__time(/1000,)}&quot;,&#xd;
        &quot;id&quot;: ${id},&#xd;
        &quot;airlineName&quot;: &quot;江南航空&quot;,&#xd;
        &quot;airlineIataCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;departurePortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;departurePortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;destinationPortName&quot;: &quot;HANGZHOU&quot;,&#xd;
        &quot;destinationPortCode&quot;: &quot;HGH&quot;,&#xd;
        &quot;packTypeCode&quot;: &quot;SET&quot;,&#xd;
        &quot;packTypeId&quot;: &quot;370&quot;,&#xd;
        &quot;packTypeName&quot;: &quot;SETS&quot;,&#xd;
        &quot;consigneeCode&quot;: &quot;jiangnan&quot;,&#xd;
        &quot;consigneeName&quot;: &quot;江南&quot;,&#xd;
        &quot;supplierCustomsBrokerCode&quot;: &quot;&quot;,&#xd;
        &quot;deliveryOrderFlag&quot;: false,&#xd;
        &quot;customsDeclarationFlag&quot;: false,&#xd;
        &quot;deliveryServiceFlag&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/notified?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="抽单代理查询_tsnUct/supplierDrawAgent/getDrawAgentListByParam" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">122.224.230.26</stringProp>
              <stringProp name="HTTPSampler.port">20054</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">tsnUct/supplierDrawAgent/getDrawAgentListByParam?queryParam=</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">不用通用配置</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="提交抽单服务_airImport/saveDeliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryOrderAgentId&quot;: 5,&#xd;
    &quot;deliveryOrderStatusName&quot;: &quot;&quot;,&#xd;
    &quot;deliveryOrderAgentAddr&quot;: &quot;浙江省杭州市西湖区东湖北路132号&quot;,&#xd;
    &quot;deliveryOrderTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P5d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;deliveryOrderAgentCode&quot;: &quot;jiangnan&quot;,&#xd;
    &quot;deliveryOrderAgentName&quot;: &quot;江南简称&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDeliveryOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取抽单状态选项_param/getDeliveryOrderStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryOrderStatus</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改抽单服务_airImport/deliveryOrder" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deliveryOrder?id=${id}&amp;deliveryOrderStatus=3&amp;deliveryOrderTime=${__timeShift(yyyy-MM-dd,,P6d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="选择报关行_airImport/saveCustomsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;customsDeclarationType&quot;: &quot;2&quot;,&#xd;
    &quot;customsStatusName&quot;: &quot;&quot;,&#xd;
    &quot;customsBrokerId&quot;: 45,&#xd;
    &quot;customsDeclarationTime&quot;: &quot;${__timeShift(yyyy-MM-dd,,P2d,,)}&quot;,&#xd;
    &quot;id&quot;: ${id},&#xd;
    &quot;customsBrokerCode&quot;: &quot;234234&quot;,&#xd;
    &quot;customsBrokerName&quot;: &quot;江南报关&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveCustomsDeclaration</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取报关状态选项_param/getCustomsStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getCustomsStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=3&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆流程修改报关状态_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/customsDeclaration?id=${id}&amp;customsStatus=2&amp;customsDeclarationTime=${__timeShift(yyyy-MM-dd,,P8d,,)}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="勾选送货服务_/saveDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/saveDelivery</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="删除送货地址_/deleteDelivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deliveryList&quot;: [&#xd;
        {&#xd;
            &quot;contactTel&quot;: &quot;18267912999&quot;,&#xd;
            &quot;contacts&quot;: &quot;江南&quot;,&#xd;
            &quot;deliveryAddress&quot;: &quot;这个是送货地址啊&quot;,&#xd;
            &quot;driver&quot;: &quot;江南听雨&quot;,&#xd;
            &quot;driverTel&quot;: &quot;18267912365&quot;,&#xd;
            &quot;id&quot;: ${deliveryListId},&#xd;
            &quot;vehicleCode&quot;: &quot;JNCX&quot;,&#xd;
            &quot;vehicleContactTel&quot;: &quot;18267912345&quot;,&#xd;
            &quot;vehicleContacts&quot;: &quot;江南&quot;,&#xd;
            &quot;vehicleName&quot;: &quot;江南出行有限公司&quot;,&#xd;
            &quot;vehicleNo&quot;: &quot;浙A664UU&quot;,&#xd;
            &quot;deliveryStatusName&quot;: &quot;&quot;,&#xd;
            &quot;vehicleId&quot;: 98&#xd;
        }&#xd;
    ],&#xd;
    &quot;id&quot;: ${id}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/deleteDelivery?id=${deliveryListId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取送货服务状态选项_param/getDeliveryStatus" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/param/getDeliveryStatus</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改送货服务状态状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=4</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="逆状态修改送货服务状态_/delivery" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/delivery?id=${id}&amp;deliveryStatus=3</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/suspend?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/customsDeclaration" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/abandoned?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="复制新增_/copy" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/copy?id=${id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
                <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="简单控制器-查询" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取tab名字_/param/getTabType" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/param/getTabTypes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取各tab数字统计_/airImport/getCount" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getCount?pageIndex=1&amp;pageSize=20&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部查询（除HAWB）_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;businessNo=TESTAI20001&amp;mawb=mawb1595&amp;clientBusinessNo=clientNo&amp;departurePortId=3683&amp;destinationPortId=3683&amp;etaStart=2020-07-01&amp;etaEnd=2020-07-31&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="全部查询（只有HAWB）_/getList?pageIndex=1&amp;pageSize=20&amp;listType=01" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;hawb=hawb15953&amp;listType=01</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="草稿_/getList?pageIndex=1&amp;pageSize=20&amp;listType=02" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=02</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待到港_/getList?pageIndex=1&amp;pageSize=20&amp;listType=03" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=03</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待抽单_/getList?pageIndex=1&amp;pageSize=20&amp;listType=04" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=04</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待委托报关_/getList?pageIndex=1&amp;pageSize=20&amp;listType=05" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=05</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待委托送货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=06" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=06</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待提货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=07" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=07</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待送货_/getList?pageIndex=1&amp;pageSize=20&amp;listType=08" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=08</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="费用和签单_/getList?pageIndex=1&amp;pageSize=20&amp;listType=09" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=09</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="中止业务_/getList?pageIndex=1&amp;pageSize=20&amp;listType=10" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=10</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="作废业务_/getList?pageIndex=1&amp;pageSize=20&amp;listType=11" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport//getList?pageIndex=1&amp;pageSize=20&amp;listType=11</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="费用待录入_/airImport/getLis" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${mock_prefix}/airImport/getList?businessNo=&amp;clientBusinessNo=&amp;pageIndex=1&amp;pageSize=20&amp;listType=01&amp;processStatus=2</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="false">
              <stringProp name="BeanShellAssertion.query">import org.json.JSONObject;
import org.json.JSONArray;

try {
//	获取请求返回值。注意此处只能获取到String类型;
	String response_data = prev.getResponseDataAsString();
//	将String类型的返回值构造成JSONObject对象;
	JSONObject data_obj = new JSONObject(response_data); 

//tsnUct/client/queryByParam接口结果
	String result=&quot;操作管理获取所有客户_tsnUct/client/queryByParam接口&quot;;

//   响应status
     String state = data_obj.get(&quot;state&quot;).toString();

//     System.out.println(&quot;----&quot;+state+&quot;-----&quot;);
     if(state.equals(&quot;0&quot;)){
     	Failure=false;
	     result=result+&quot;state返回正确&quot;;
     }else{
     	Failure=true;
     	FailureMessage=result+&quot;state未返回0错误&quot;;
	     result=&quot;state未返回0错误&quot;;
     }

}catch (Throwable ex) {
   log.error(&quot;Failed in Beanshell&quot;, ex);
   throw ex;
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="聚合报告" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="TestPlan.comments">    http://122.224.230.26:20054/tsnBase/baseContainerType/getBaseContainerTypeList</stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
